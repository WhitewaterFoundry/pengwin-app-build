trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- script: |
   echo 'Clone Pengwin repository azure_pipelines branch'
   git clone -b azure_pipelines https://github.com/WhitewaterFoundry/Pengwin $(System.DefaultWorkingDirectory)\Pengwin
   
  displayName: 'Clone Pengwin repository to working folder '

- task: DownloadGitHubRelease@0
  displayName: 'Download Pengwin rootfs images to working folder'
  inputs:
    connection: 'Github Connection'
    userRepository: 'WhitewaterFoundry/pengwin-rootfs-builds'
    itemPattern: '*.tar.gz'
    downloadPath: '$(System.DefaultWorkingDirectory)'

- script: |
   echo 'Moving to working folder'
   cd $(System.DefaultWorkingDirectory)
   
   move $(System.DefaultWorkingDirectory)\install_amd64_rootfs.tar.gz $(System.DefaultWorkingDirectory)\Pengwin\ARM64\install.tar.gz
   move $(System.DefaultWorkingDirectory)\install_arm64_rootfs.tar.gz $(System.DefaultWorkingDirectory)\Pengwin\x64\install.tar.gz
  displayName: 'Move rootfs images into place'

- task: DownloadSecureFile@1
  displayName: 'Download signing key from secure file'
  inputs:
    secureFile: StoreKey.pfx

- powershell: |
   $PfxFilePath= $Env:PFXFILE
   
   $absolutePfxFilePath = Resolve-Path -Path $(signingCert.secureFilePath)
   Write-Output "Importing store certificate '$absolutePfxFilePath'..."
   
   Add-Type -AssemblyName System.Security
   $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
   $cert.Import($absolutePfxFilePath, $(CertPassword), [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
   $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
   $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::"ReadWrite")
   $store.Add($cert)
   $store.Close()
   
  displayName: 'Import signing key into build user'
  env:
    PASSWORD: $(CertPassword)
    PFXFILE: $(signingCert.secureFilePath)

- script: |
   echo "Going to Pengwin folder"
   cd $(System.DefaultWorkingDirectory)\Pengwin
   
   echo "Running build.bat"
   build.bat
  displayName: 'Run build.bat'

- task: CopyFiles@2
  displayName: 'Copy AppPackages to $(build.artifactstagingdirectory)'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)\Pengwin\AppPackages\DistroLauncher-Appx'
    TargetFolder: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
  condition: succeededOrFailed()